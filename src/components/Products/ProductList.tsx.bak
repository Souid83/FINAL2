import React, { useState, useEffect } from 'react';
import { useProductStore } from '../../store/productStore';
import { Edit, Trash2, AlertCircle, Image as ImageIcon, Plus, Package } from 'lucide-react';
import { ProductForm } from './ProductForm';
import { StockManager } from './StockManager';
import { supabase } from '../../lib/supabase';
import type { Database } from '../../types/supabase';

type Product = Database['public']['Tables']['products']['Row'] & {
  category?: {
    type: string;
    brand: string;
    model: string;
  } | null;
  stocks?: {
    id: string;
    name: string;
    quantite: number;
    group?: {
      name: string;
      synchronizable: boolean;
    };
  }[];
};

interface ProductListProps {
  products: Product[];
}

const TVA_RATE = 0.20;

export const ProductList: React.FC<ProductListProps> = ({ products: initialProducts }) => {
  const { isLoading, error, deleteProduct, fetchProducts } = useProductStore();
  const [products, setProducts] = useState<Product[]>(initialProducts);

  useEffect(() => {
    setProducts(initialProducts);
  }, [initialProducts]);

  useEffect(() => {
    const subscription = supabase
      .channel('stock_changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'stock_produit' },
        async () => {
          const updatedProducts = await fetchProducts();
          if (updatedProducts) {
            setProducts(updatedProducts);
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(subscription);
    };
  }, [fetchProducts]);

  return (
    <div className="relative bg-white p-4 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-4">Liste des produits</h2>
      <table className="min-w-full border border-gray-200 rounded-lg overflow-hidden shadow-md">
        <thead className="bg-gray-100 border-b">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Image</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">SKU</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Nom</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Catégorie</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Prix d'achat HT</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Prix magasin TTC</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Prix pro TTC</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Stock</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase">Actions</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-gray-200">
          {products.map((product) => {
            const totalStock = (product.stock ?? product.stocks?.reduce((sum, stock) => sum + stock.quantite, 0)) || 0;
            return (
              <tr key={product.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  {product.images?.[0] ? (
                    <img
                      src={product.images[0]}
                      alt={product.name}
                      className="w-12 h-12 object-cover rounded-lg"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = 'https://via.placeholder.com/48?text=No+Image';
                      }}
                    />
                  ) : (
                    <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                      <ImageIcon size={24} className="text-gray-400" />
                    </div>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{product.sku}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.name}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {product.category ? `${product.category.type} ${product.category.brand} ${product.category.model}` : '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.purchase_price_with_fees?.toFixed(2)} €</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{(product.retail_price * 1.2).toFixed(2)} €</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{(product.pro_price * 1.2).toFixed(2)} €</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{totalStock}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <div className="flex space-x-4">
                    <button onClick={() => console.log('Modifier', product.id)} className="text-blue-500 hover:text-blue-700">
                      <Edit size={18} />
                    </button>
                    <button onClick={() => console.log('Supprimer', product.id)} className="text-red-500 hover:text-red-700">
                      <Trash2 size={18} />
                    </button>
                  </div>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};
